FROM osrf/ros:kinetic-desktop-full

ARG ssh_prv_key
ARG ssh_pub_key

SHELL ["/bin/bash", "-c"]

RUN apt-get update && apt-get install -y --no-install-recommends \
        apt-utils && \
    apt-get install -y --no-install-recommends \
        git \
        ca-certificates \
        make \
        automake \
        autoconf \
        libtool \
        pkg-config \
        python \
        libxext-dev \
        libx11-dev \
        x11proto-gl-dev

RUN rm -rf /var/lib/apt/lists/*

ENV NVIDIA_VISIBLE_DEVICES=all \
    NVIDIA_DRIVER_CAPABILITIES=all

# ==================
# below sourced from https://gitlab.com/nvidia/opengl/blob/ubuntu16.04/base/Dockerfile

RUN dpkg --add-architecture i386 && \
    apt-get update && apt-get install -y --no-install-recommends \
        libxau6 libxau6:i386 \
        libxdmcp6 libxdmcp6:i386 \
        libxcb1 libxcb1:i386 \
        libxext6 libxext6:i386 \
        libx11-6 libx11-6:i386 && \
    rm -rf /var/lib/apt/lists/*

ENV LD_LIBRARY_PATH=/usr/lib/x86_64-linux-gnu:/usr/lib/i386-linux-gnu${LD_LIBRARY_PATH:+:${LD_LIBRARY_PATH}}

# ==================
# below sourced from https://gitlab.com/nvidia/opengl/blob/ubuntu14.04/1.0-glvnd/runtime/Dockerfile

RUN apt-get update && apt-get install -y --no-install-recommends \
        apt-utils && \
    apt-get install -y --no-install-recommends \
        git \
        ca-certificates \
        make \
        automake \
        autoconf \
        libtool \
        pkg-config \
        python \
        libxext-dev \
        libx11-dev \
        x11proto-gl-dev && \
    rm -rf /var/lib/apt/lists/*

WORKDIR /opt/libglvnd

RUN git clone --branch=v1.0.0 https://github.com/NVIDIA/libglvnd.git . && \
    ./autogen.sh && \
    ./configure --prefix=/usr/local --libdir=/usr/local/lib/x86_64-linux-gnu && \
    make -j"$(nproc)" install-strip && \
    find /usr/local/lib/x86_64-linux-gnu -type f -name 'lib*.la' -delete

RUN dpkg --add-architecture i386 && \
    apt-get update && apt-get install -y --no-install-recommends \
        gcc-multilib \
        libxext-dev:i386 \
        libx11-dev:i386 && \
    rm -rf /var/lib/apt/lists/*

# 32-bit libraries
RUN make distclean && \
    ./autogen.sh && \
    ./configure --prefix=/usr/local --libdir=/usr/local/lib/i386-linux-gnu --host=i386-linux-gnu "CFLAGS=-m32" "CXXFLAGS=-m32" "LDFLAGS=-m32" && \
    make -j"$(nproc)" install-strip && \
    find /usr/local/lib/i386-linux-gnu -type f -name 'lib*.la' -delete

COPY 10_nvidia.json /usr/local/share/glvnd/egl_vendor.d/10_nvidia.json

RUN echo '/usr/local/lib/x86_64-linux-gnu' >> /etc/ld.so.conf.d/glvnd.conf && \
    echo '/usr/local/lib/i386-linux-gnu' >> /etc/ld.so.conf.d/glvnd.conf && \
    ldconfig

ENV LD_LIBRARY_PATH=/usr/local/lib/x86_64-linux-gnu:/usr/local/lib/i386-linux-gnu${LD_LIBRARY_PATH:+:${LD_LIBRARY_PATH}}

# ==================
# below sourced from https://gitlab.com/nvidia/cuda/blob/ubuntu16.04/8.0/runtime/Dockerfile

RUN apt-key adv --fetch-keys http://developer.download.nvidia.com/compute/cuda/repos/ubuntu1604/x86_64/7fa2af80.pub && \
    echo "deb http://developer.download.nvidia.com/compute/cuda/repos/ubuntu1604/x86_64 /" > /etc/apt/sources.list.d/cuda.list && \
    echo "deb http://developer.download.nvidia.com/compute/machine-learning/repos/ubuntu1604/x86_64 /" > /etc/apt/sources.list.d/nvidia-ml.list

ENV CUDA_VERSION_MAJOR=8.0 \
    CUDA_VERSION_MINOR=61 \
    CUDA_PKG_EXT=8-0
ENV CUDA_VERSION=$CUDA_VERSION_MAJOR.$CUDA_VERSION_MINOR
RUN apt-get update && apt-get install -y --no-install-recommends \
        cuda-nvrtc-dev-$CUDA_PKG_EXT=$CUDA_VERSION-1 \
        cuda-nvgraph-dev-$CUDA_PKG_EXT=$CUDA_VERSION-1 \
        cuda-cusolver-dev-$CUDA_PKG_EXT=$CUDA_VERSION-1 \
        cuda-cublas-dev-$CUDA_PKG_EXT=$CUDA_VERSION.2-1 \
        cuda-cufft-dev-$CUDA_PKG_EXT=$CUDA_VERSION-1 \
        cuda-curand-dev-$CUDA_PKG_EXT=$CUDA_VERSION-1 \
        cuda-cusparse-dev-$CUDA_PKG_EXT=$CUDA_VERSION-1 \
        cuda-npp-dev-$CUDA_PKG_EXT=$CUDA_VERSION-1 \
        cuda-cudart-dev-$CUDA_PKG_EXT=$CUDA_VERSION-1 \
        cuda-misc-headers-$CUDA_PKG_EXT=$CUDA_VERSION-1 \
        cuda-toolkit-$CUDA_PKG_EXT=$CUDA_VERSION-1  && \
    ln -s cuda-$CUDA_VERSION_MAJOR /usr/local/cuda && \
    ln -s /usr/local/cuda-8.0/targets/x86_64-linux/include /usr/local/cuda/include && \
    rm -rf /var/lib/apt/lists/*

# nvidia-docker 1.0
LABEL com.nvidia.volumes.needed="nvidia_driver"
LABEL com.nvidia.cuda.version="${CUDA_VERSION}"

RUN echo "/usr/local/nvidia/lib" >> /etc/ld.so.conf.d/nvidia.conf && \
    echo "/usr/local/nvidia/lib64" >> /etc/ld.so.conf.d/nvidia.conf

ENV PATH=/usr/local/nvidia/bin:/usr/local/cuda/bin:${PATH} \
    LD_LIBRARY_PATH=/usr/local/nvidia/lib:/usr/local/nvidia/lib64${LD_LIBRARY_PATH:+:${LD_LIBRARY_PATH}}

# nvidia-container-runtime
ENV NVIDIA_REQUIRE_CUDA="cuda>=$CUDA_VERSION_MAJOR"

# ROS Stuff
RUN echo "deb http://packages.ros.org/ros/ubuntu $(lsb_release -sc) main" > /etc/apt/sources.list.d/ros-latest.list && \
    apt-key adv --keyserver 'hkp://keyserver.ubuntu.com:80' --recv-key C1CF6E31E6BADE8868B172B4F42ED6FBAB17C654 && \
    apt-get update

#
RUN apt update && apt -y upgrade
RUN sudo apt install -y libcudnn6 libcudnn6-dev
    
SHELL ["/bin/bash", "-c"]
RUN echo "source /opt/ros/kinetic/setup.bash" >> ~/.bashrc

#This section also moves your host private key for ssh repositories
RUN apt update && \
    apt install -y \
        git \
        openssh-server \
        libmysqlclient-dev

# Authorize SSH Host
RUN mkdir -p /root/.ssh && \
    chmod 0700 /root/.ssh && \
    ssh-keyscan github.com > /root/.ssh/known_hosts

# Add the keys and set permissions
RUN echo "$ssh_prv_key" > ~/.ssh/id_ed25519 && \
    echo "$ssh_pub_key" > ~/.ssh/id_ed25519.pub && \
    chmod 600 ~/.ssh/id_ed25519 && \
    chmod 600 ~/.ssh/id_ed25519.pub
    
# ROS Stuff
RUN echo "deb http://packages.ros.org/ros/ubuntu $(lsb_release -sc) main" > /etc/apt/sources.list.d/ros-latest.list && \
    apt-key adv --keyserver 'hkp://keyserver.ubuntu.com:80' --recv-key C1CF6E31E6BADE8868B172B4F42ED6FBAB17C654 && \
    apt-get update

#
RUN apt update && apt -y upgrade
    
SHELL ["/bin/bash", "-c"]

#This section also moves your host private key for ssh repositories
RUN apt update && \
    apt install -y \
        git \
        openssh-server \
        libmysqlclient-dev

# Authorize SSH Host
RUN mkdir -p /root/.ssh && \
    chmod 0700 /root/.ssh && \
    ssh-keyscan github.com > /root/.ssh/known_hosts

# Add the keys and set permissions
RUN echo "$ssh_prv_key" > ~/.ssh/id_ed25519 && \
    echo "$ssh_pub_key" > ~/.ssh/id_ed25519.pub && \
    chmod 600 ~/.ssh/id_ed25519 && \
    chmod 600 ~/.ssh/id_ed25519.pub

# ROS Stuff
RUN echo "deb http://packages.ros.org/ros/ubuntu $(lsb_release -sc) main" > /etc/apt/sources.list.d/ros-latest.list && \
    apt-key adv --keyserver 'hkp://keyserver.ubuntu.com:80' --recv-key C1CF6E31E6BADE8868B172B4F42ED6FBAB17C654 && \
    apt-get update

#
RUN apt update && apt -y upgrade
    
SHELL ["/bin/bash", "-c"]
RUN echo "source /opt/ros/kinetic/setup.bash" >> ~/.bashrc

# Package for installing Baxter
RUN sudo apt-get update && sudo apt-get install -y build-essential wget git \
# Astra packages
ros-$ROS_DISTRO-rgbd-launch ros-$ROS_DISTRO-libuvc ros-$ROS_DISTRO-libuvc-camera ros-$ROS_DISTRO-libuvc-ros \
# Move It
ros-kinetic-moveit \
#Fiducials
ros-kinetic-fiducials \
#Debugging
vim nano iproute2 net-tools inetutils-ping tree software-properties-common

RUN sudo add-apt-repository ppa:fkrull/deadsnakes
RUN sudo apt update
RUN sudo apt install -y python3.6 python3.6-dev python3.6-tk
RUN curl https://bootstrap.pypa.io/pip/3.6/get-pip.py | sudo -H python3.6
RUN pip3.6 install --upgrade pip

RUN pip3.6 install -U "tensorflow-gpu>=1.3.0,<1.5.0" "keras>=2.0.8,<2.1.6" "h5py<3.0.0" roboticstoolbox-python
RUN pip3.6 install torch==1.4.0
RUN pip3.6 uninstall -y enum34
RUN pip3.6 install imgaug scikit-image scikit-learn ipython numpy scipy Pillow cython matplotlib defusedxml rosdep rosinstall_generator wstool rosinstall cython rospkg catkin_pkg tqdm opencv-python opencv-python-headless tensorboard==1.14.0 gym==0.9.7 pybullet sympy
#If you want to analyse the data, use a different setup, i got not clue whats fucked

#tensorboard==1.14.0

#Setup and run the VM requirements
RUN pip3.6 install virtualenv virtualenvwrapper cython
#ENV venv_name=mclickrcnn
#CMD mkvirtualenv --python=python3 $venv_name

WORKDIR /home/baxter/
RUN mkdir -p tools
WORKDIR tools
RUN wget https://github.com/davidfoerster/aptsources-cleanup/releases/download/v0.1.7.5.2/aptsources-cleanup.pyz
RUN chmod a+x aptsources-cleanup.pyz
RUN ./aptsources-cleanup.pyz -y
RUN apt update
RUN apt upgrade -y

RUN apt update
RUN apt upgrade -y

WORKDIR /home/baxter/tools
RUN git clone https://github.com/FreeSpacenav/spacenavd.git
RUN git clone https://github.com/FreeSpacenav/libspnav.git
WORKDIR /home/baxter/tools/spacenavd
RUN ./configure && make install
WORKDIR /home/baxter/tools/libspnav
RUN ./configure && make install



###Section Install pybullet library and pybullet robots + pybullet_gym
RUN mkdir -p /home/baxter/pyBulletRobotics
WORKDIR /home/baxter/pyBulletRobotics
RUN git clone https://github.com/benelot/pybullet-gym && git clone https://github.com/AIResearchLab/pybullet_robots
RUN echo "export PYBULLET_DIR=/home/baxter/pyBulletRobotics" >> ~/.bashrc
WORKDIR /home/baxter/pyBulletRobotics/pybullet-gym
RUN pip3.6 install -e .


RUN apt update && apt upgrade
RUN apt install -y unzip python-pip xterm nautilus ros-kinetic-controller-manager ros-kinetic-four-wheel-steering-msgs ros-kinetic-urdf-geometry-parser ros-kinetic-joint-state* ros-kinetic-gazebo-ros-control ros-kinetic-joy ros-kinetic-pid ros-kinetic-ros-control ros-kinetic-effort-controllers python-rosdep python-catkin-tools python-wstool ssh xclip ros-kinetic-*rqt* ros-kinetic-turtlebot-gazebo python-click ros-kinetic-position-controllers && apt remove ros-kinetic-astra* -y && apt update && apt upgrade -y

RUN pip2 install pyyaml spnav rosdep rosinstall_generator wstool rosinstall catkin_pkg empy rospkg numpy defusedxml

RUN pip3.6 install --upgrade pip && \
pip3.6 install -U pyyaml==5.4.0 rosdep rosinstall_generator wstool rosinstall catkin_pkg empy rospkg numpy simple_pid black && \
pip3.6 uninstall -y opencv-python && pip3.6 install opencv-python python-polylabel

#create pybullet rl based ws, requirements include the core randle system, communication protocal and msgs
RUN mkdir -p /home/baxter/pyb_ws/src
WORKDIR /home/baxter/pyb_ws/src
RUN git clone git@github.com:AIResearchLab/randle_serial.git && \
git clone git@github.com:AIResearchLab/randle_core.git && \
git clone https://github.com/wjwwood/serial && \
#git clone -b kinetic-devel https://github.com/RethinkRobotics/baxter_common && \ Removed for hardware integreation
git clone https://github.com/orbbec/ros_astra_launch && \
git clone https://github.com/orbbec/ros_astra_camera && \
git clone git@github.com:AIResearchLab/uc_common.git && \
git clone git@github.com:AIResearchLab/fabric_sorting.git && \
git clone git@github.com:AIResearchLab/uc_deep_rl.git && \
git clone -b kinetic-devel https://github.com/RethinkRobotics/baxter_common && \
git clone -b kinetic-devel https://github.com/ros-planning/moveit_robots.git


##This section is for mujuco and deep RL sim data
RUN mkdir -p /root/.mujoco && mkdir -p /home/baxter/mj_install && mkdir -p ~/.mujoco/
COPY mjkey.txt /root/.mujoco/
COPY mujoco210.zip /home/baxter/mj_install
WORKDIR /home/baxter/mj_install
RUN unzip mujoco210.zip -d . && cp -r mujoco210 /root/.mujoco/ && cp -r /root/.mujoco/mjkey.txt /root/.mujoco/mujoco210/bin/
RUN echo "export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/root/.mujoco/mujoco210/bin" >> ~/.bashrc

RUN apt install -y libosmesa6-dev libgl1-mesa-glx libglfw3 patchelf

RUN export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/root/.mujoco/mjpro150/bin && pip3.6 install -U supervisor 'mujoco-py<2.2,>=2.1'

RUN apt update -y && apt install -y libglew-dev && echo "export LD_PRELOAD=/usr/lib/x86_64-linux-gnu/libGLEW.so" >> ~/.bashrc
##




#This stuff is only for hardware, need to reconfigure the system later
#RUN sed -i -e '16 s/value="0.1"/value="0.0"/g' /home/baxter/pyb_ws/src/moveit_robots/baxter/baxter_moveit_config/launch/trajectory_execution.launch
#WORKDIR /home/baxter/pyb_ws/src/baxter
# removing baxter entry in rosinstall file to avoid duplicate baxter_sdk folders
#RUN sed -i '1,4d' baxter_sdk.rosinstall
#RUN wstool init . baxter_sdk.rosinstall 
#RUN wstool update
#RUN rm baxter.sh

WORKDIR /home/baxter/pyb_ws

RUN echo '#!/bin/bash' > catkin_make.bash  && \
    echo 'echo Please run this from the simulated workspace' >> catkin_make.bash && \
    echo 'rm -r devel build logs' >> catkin_make.bash && \
    echo 'catkin config --extend /opt/ros/kinetic --cmake-args -DCMAKE_BUILD_TYPE=Release' >> catkin_make.bash && \
    echo 'catkin build --cmake-args -DCMAKE_BUILD_TYPE=Release' >> catkin_make.bash  && \
    echo '. ./devel/setup.bash' >> catkin_make.bash && \
echo 'built py2 build script' && \
    chmod +x catkin_make.bash
RUN /bin/bash -c '. /opt/ros/kinetic/setup.bash; cd /home/baxter/pyb_ws; catkin config --extend /opt/ros/kinetic --cmake-args -DCMAKE_BUILD_TYPE=Release; catkin build --cmake-args -DCMAKE_BUILD_TYPE=Release'

RUN echo '#!/bin/bash' > make_dual_urdf.bash  && \
    echo 'echo Please run this from the simulated workspace' >> make_dual_urdf.bash && \
    echo 'source devel/setup.bash' >> make_dual_urdf.bash && \
    echo 'path_of_randle_pybullet=$(rospack find randle_pybullet)' >> make_dual_urdf.bash && \
    echo 'urdf_target=$path_of_randle_pybullet/urdf/dual_randle_baxter.urdf' >> make_dual_urdf.bash && \
    echo 'urdf_source=$path_of_randle_pybullet/urdf/dual_randle_baxter.xacro' >> make_dual_urdf.bash && \
    echo 'rosrun xacro xacro --inorder -o $urdf_target $urdf_source' >> make_dual_urdf.bash && chmod +x make_dual_urdf.bash

WORKDIR /home/baxter/
RUN source ~/.bashrc
WORKDIR /home/baxter/pyb_ws

COPY baxter.sh /home/baxter/pyb_ws/baxter.sh

ENTRYPOINT /bin/bash -c 'cd /home/baxter/pyb_ws/src/randle_core;git pull;cd /home/baxter/pyb_ws/src/randle_serial;git pull;cd /home/baxter/pyBulletRobotics/pybullet_robots;git pull;cd /home/baxter/pyb_ws/src/uc_common;git pull;cd /home/baxter/pyb_ws/src/uc_deep_rl;git pull;cd /home/baxter/pyb_ws/src/randle_core;pip3.6 install -e randle-envs;cd /home/baxter/pyb_ws;./catkin_make.bash;chmod +x baxter.sh' && /bin/bash
